// ========================================
// Stage Configuration Types
// ========================================

/**
 * Output types for AI-generated content
 */
export type OutputType = 'text' | 'selection' | 'list' | 'analysis';

/**
 * Tone options for AI responses
 */
export type ToneType =
  | 'professional'
  | 'casual'
  | 'inspiring'
  | 'educational'
  | 'strategic'
  | 'analytical'
  | 'realistic'
  | 'informative'
  | 'precautionary'
  | 'concise'
  | 'customer-centric'
  | 'practical'
  | 'business-oriented'
  | 'action-oriented'
  | 'financial'
  | 'inspirational'
  | 'principled'
  | 'creative'
  | 'descriptive'
  | 'design-oriented'
  | 'detailed'
  | 'structured'
  | 'focused'
  | 'logical'
  | 'technical'
  | 'methodical'
  | 'persuasive'
  | 'empathetic'
  | 'critical'
  | 'benefit-oriented'
  | 'functional'
  | 'confident'
  | 'creative_and_professional'
  | 'persuasive_and_concise';

/**
 * Complexity levels for AI responses
 */
export type ComplexityType = 'simple' | 'moderate' | 'technical' | 'simple_and_clear';

/**
 * Constraints for AI prompt generation
 */
export interface PromptConstraints {
  /** Expected length (e.g., "50-75 words", "1 paragraph") */
  length?: string;

  /** Number of items to generate (for lists/selections) */
  count?: number;

  /** Tone of the response */
  tone?: ToneType;

  /** Complexity level of language */
  complexity?: ComplexityType;

  /** Minimum word count */
  minWords?: number;

  /** Maximum word count */
  maxWords?: number;
}

/**
 * Example input/output pairs for AI prompt engineering
 */
export interface PromptExample {
  /** Example input */
  input: string;

  /** Expected output */
  output: string;
}

/**
 * Tools and capabilities available to AI
 */
export interface PromptTools {
  /** Enable web search/grounding */
  webSearch?: boolean;

  /** Enable image generation */
  imageGeneration?: boolean;

  /** Enable code execution */
  codeExecution?: boolean;
}

/**
 * Validation rules for AI output
 */
export interface PromptValidation {
  /** Minimum character length */
  minLength?: number;

  /** Maximum character length */
  maxLength?: number;

  /** Required elements in output */
  requiredElements?: string[];

  /** Regex pattern for format validation */
  format?: RegExp;
}

/**
 * AI model settings
 */
export interface AISettings {
  /** Temperature (0.0 = deterministic, 1.0 = creative) */
  temperature?: number;

  /** Top-p sampling */
  topP?: number;

  /** Top-k sampling */
  topK?: number;

  /** Maximum output tokens */
  maxOutputTokens?: number;
}

/**
 * Complete prompt configuration for AI generation
 */
export interface PromptConfig {
  // === Core Prompt Elements (Phase 1) ===

  /** AI's role/persona */
  role?: string;

  /** Keys from StartupData to include as context */
  contextKeys?: string[];

  /** How to incorporate user input */
  userInputPrompt?: string;

  /** Goal/objective for this stage */
  goal?: string;

  /** Expected output format description */
  outputFormat?: string;

  /** Constraints for the output */
  constraints?: PromptConstraints;

  // === Advanced Elements (Phase 2+) ===

  /** Example inputs and outputs for few-shot learning */
  examples?: PromptExample[];

  /** Available tools for this stage */
  tools?: PromptTools;

  /** Validation rules */
  validation?: PromptValidation;

  /** AI model settings */
  aiSettings?: AISettings;

  // === Legacy Support ===

  /** Simple prompt string (for backwards compatibility) */
  prompt?: string;
}

/**
 * Configuration for a single stage/substage
 */
export interface StageConfig {
  // === Identification ===

  /** Unique identifier for this stage */
  id: string;

  // === UI Display ===

  /** Stage title in English */
  title_en: string;

  /** Stage title in Farsi */
  title_fa: string;

  // === Guidance (Educational content before question) ===

  /** Guidance/explanation in English */
  guidance_en?: string;

  /** Guidance/explanation in Farsi */
  guidance_fa?: string;

  // === Question ===

  /** Question to ask user in English */
  question_en: string;

  /** Question to ask user in Farsi */
  question_fa: string;

  // === User Input ===

  /** Whether user input is required (false = auto-generated if user skips) */
  userInputRequired: boolean;

  // === AI Prompt Configuration ===

  /** Complete prompt configuration for AI */
  promptConfig?: PromptConfig;

  // === Output ===

  /** Type of output expected */
  outputType: OutputType;

  // === Examples (for user guidance) ===

  /** Example answers to help users understand what's expected */
  examples?: string[];

  // === Data Mapping ===

  /** Key in StartupData where this stage's answer is stored */
  dataKey?: string;

  // === Metadata ===

  /** Whether this stage is auto-generated (no user interaction) */
  isAutoGenerated?: boolean;

  /** Whether this is a summary stage */
  isSummary?: boolean;

  /** Order/sequence number within parent subsection */
  order?: number;
}

/**
 * A subsection contains multiple related stages
 */
export interface SubsectionConfig {
  /** Unique identifier */
  id: string;

  /** Subsection title in English */
  title_en: string;

  /** Subsection title in Farsi */
  title_fa: string;

  /** Stages within this subsection */
  stages: StageConfig[];

  /** Order within parent phase */
  order?: number;
}

/**
 * A phase is a major section containing multiple subsections
 */
export interface PhaseConfig {
  /** Unique identifier */
  id: string;

  /** Phase title in English */
  title_en: string;

  /** Phase title in Farsi */
  title_fa: string;

  /** Phase description in English */
  description_en?: string;

  /** Phase description in Farsi */
  description_fa?: string;

  /** Subsections within this phase */
  subsections: SubsectionConfig[];

  /** Phase number (1, 2, 3, ...) */
  phaseNumber?: number;
}

/**
 * Complete configuration for all phases
 */
export interface AllPhasesConfig {
  phases: PhaseConfig[];
}
